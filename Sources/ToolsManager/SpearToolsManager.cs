using SpearSettings;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Security.Permissions;
using System.Text;
using System.Threading.Tasks;
using Utils;
using Utils.Loggers;

namespace ToolsManager
{
    /// <summary>
    /// SpearToolsManager will manage routines usefull to so some tools integration
    /// ** Git **
    /// Spear  SpearToolsManager will help creating a .gitignore file of a game instalations, to 
    /// helps turning it into a repository. The gitignore file will have three sections 
    /// (1) # Manually added files : in blank. This section is reserved for the used add any gitignore manually
    ///     after the auto-generation
    /// (2) # User-defined folders : will contais the ignored folders choosen during the creation.
    /// (3) # User defined extensions 
    /// (4) #Augo-generated by spear.exe: will add all the files (one by one) of the ones not already defined. 
    /// </summary>
    public class SpearToolsManager
    {
        private readonly ILogger log;
        private readonly string theGame;
        private readonly SPGame gameSettings;
        private readonly PathsHelper paths;  // helper for generating the right names of the paths
        private readonly SPSettings settings;

        public SpearToolsManager(string gameName)
        {
            log = Log4NetLogger.getInstance(LogAppender.APP_CORE);
            CSharp.setLogger(Log4NetLogger.getInstance(LogAppender.APP_CORE));
            this.theGame = gameName;
            SPConfig config = SPConfig.loadConfig();
            if (config != null)
            {
                log.Debug("-- config.selectSettings() game:" + gameName);
                this.settings = config.settings;
                this.gameSettings = config.selectGame(gameName);
                this.paths = new PathsHelper(this.settings, this.gameSettings);
            }
            else
            {
                log.Warn("COULD NOT LOAD CONFIGURATION FILE");
                this.settings = null;
                this.gameSettings = null;
                this.paths = null;
            }
        }

        #region files

        public static bool exportLogsAsZip(string dstPath)
        {
            const string zipFile = @".\logs-spear.zip";
            const string zipPath = @".\ZipTempDir\";
            const string cmdDeleteZip = @"/C del /f .\logs-spear.zip";
            const string cmdDeleteDir = @"/C rd /S /Q ZipTempDir";
            const string cmdCreate = @"/C mkdir ZipTempDir";
            const string cmdCopyLogs = @"/C xcopy /Y /s .\Logs\* .\ZipTempDir\";
            const string cmdCopySettings = @"/C xcopy /Y /s .\Settings\* .\ZipTempDir\";
            string cmdMoveToDst = @"move .\logs-spear.zip " + dstPath;

            System.Diagnostics.Process.Start("CMD.exe", cmdDeleteZip);
            System.Diagnostics.Process.Start("CMD.exe", cmdDeleteDir);
            System.Diagnostics.Process.Start("CMD.exe", cmdCreate);
            System.Diagnostics.Process.Start("CMD.exe", cmdCopyLogs);
            System.Diagnostics.Process.Start("CMD.exe", cmdCopySettings);
            ZipFile.CreateFromDirectory(zipPath, zipFile);
            System.Diagnostics.Process.Start("CMD.exe", cmdMoveToDst);

            return true;
        }

        #endregion files

        #region steam 

        public static void killSteamProcs(out string errMsg)
        {
            SteamAppHandler.killAllSteam(out errMsg);
        }

        #endregion steam

        #region git

        public bool gitignoreDetected()
        {
            string gitignorePath = this.paths.gitignore;
            if (File.Exists(gitignorePath))
            {
                return true;
            }
            return false;
        }

        public bool createGitignore(out string errMsg)
        {
            return this.createGitignore(new List<string>(), new List<string> { "exe", "dll"}, out errMsg);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="errMsg"></param>
        /// <returns></returns>
        public bool createGitignore(List<string> foldersToIgnore, List<string> extensionsToIgnore, out string errMsg)
        {
            log.Debug(" -- createGitignore()");
            GitignoreHandler gitHand = new GitignoreHandler(this.paths.steamGame, foldersToIgnore, extensionsToIgnore);
            gitHand.createGitignore(out errMsg);
            return true;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public bool deleteGitignore(out string errMsg)
        {
            log.Debug(" -- deleteGitignore()");
            string gitignorePath = this.paths.gitignore;
            if (File.Exists(gitignorePath))
            {
                File.Delete(gitignorePath);
                errMsg = "";
                return true;
            }
            errMsg = ".gitignore file does not exist!";
            return false;
        }

        #endregion git 

    }
}
